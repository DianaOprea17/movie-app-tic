{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, vModelSelect as _vModelSelect, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, withModifiers as _withModifiers, renderList as _renderList, Fragment as _Fragment, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"addmovieform\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"src\"];\nconst _hoisted_4 = {\n  key: 1\n};\nconst _hoisted_5 = [\"src\"];\nconst _hoisted_6 = {\n  key: 2\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h1\", null, _toDisplayString($data.userName) + \" Movie List\", 1 /* TEXT */), _createElementVNode(\"button\", {\n    type: \"button\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.signoutuser && $options.signoutuser(...args)),\n    class: \"btn-up\"\n  }, \" Sign out\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.toggleForm && $options.toggleForm(...args)),\n    class: \"btn-up\"\n  }, \"Add New Movie\"), $data.isFormVisible ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[16] || (_cache[16] = _createElementVNode(\"h2\", null, \"Add a New Movie\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[7] || (_cache[7] = _withModifiers((...args) => $options.addMovie && $options.addMovie(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_cache[8] || (_cache[8] = _createElementVNode(\"label\", {\n    for: \"movieTitle\"\n  }, \"Title:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    id: \"movieTitle\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.newMovie.title = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newMovie.title]])]), _createElementVNode(\"div\", null, [_cache[10] || (_cache[10] = _createElementVNode(\"label\", {\n    for: \"movieGenre\"\n  }, \"Genre:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    id: \"movieGenre\",\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.newMovie.genre = $event),\n    required: \"\"\n  }, _cache[9] || (_cache[9] = [_createStaticVNode(\"<option value=\\\"\\\" disabled selected>Select a genre</option><option value=\\\"Action\\\">Action</option><option value=\\\"Animation\\\">Animation</option><option value=\\\"Comedy\\\">Comedy</option><option value=\\\"Drama\\\">Drama</option><option value=\\\"Horror\\\">Horror</option><option value=\\\"Romance\\\">Romance</option><option value=\\\"Sci-Fi\\\">Sci-Fi</option><option value=\\\"Thriller\\\">Thriller</option>\", 9)]), 512 /* NEED_PATCH */), [[_vModelSelect, $data.newMovie.genre]])]), _createElementVNode(\"div\", null, [_cache[11] || (_cache[11] = _createElementVNode(\"label\", {\n    for: \"movieDate\"\n  }, \"Date:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    id: \"movieDate\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.newMovie.date = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newMovie.date]])]), _createElementVNode(\"div\", null, [_cache[12] || (_cache[12] = _createElementVNode(\"label\", {\n    for: \"movieScore\"\n  }, \"Score:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"number\",\n    id: \"movieScore\",\n    \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => $data.newMovie.score = $event),\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newMovie.score]])]), _createElementVNode(\"div\", null, [_cache[13] || (_cache[13] = _createElementVNode(\"label\", {\n    for: \"moviePoster\"\n  }, \"Movie Poster:\", -1 /* HOISTED */)), _createElementVNode(\"input\", {\n    type: \"file\",\n    id: \"moviePoster\",\n    onChange: _cache[6] || (_cache[6] = (...args) => $options.handleImageUpload && $options.handleImageUpload(...args)),\n    accept: \"image/*\"\n  }, null, 32 /* NEED_HYDRATION */)]), $data.imagePreview ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_cache[14] || (_cache[14] = _createElementVNode(\"h3\", null, \"Image Preview:\", -1 /* HOISTED */)), _createElementVNode(\"img\", {\n    src: $data.imagePreview,\n    alt: \"Image Preview\",\n    style: {\n      \"max-width\": \"200px\",\n      \"margin-top\": \"10px\"\n    }\n  }, null, 8 /* PROPS */, _hoisted_3)])) : _createCommentVNode(\"v-if\", true), _cache[15] || (_cache[15] = _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"btn-form\"\n  }, \"Add Movie\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */)])) : _createCommentVNode(\"v-if\", true), $data.userMovies.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_cache[17] || (_cache[17] = _createElementVNode(\"h2\", null, \"Your Movies:\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.userMovies, movie => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: movie.title\n    }, [_createElementVNode(\"h3\", null, _toDisplayString(movie.title), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(movie.genre), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString(movie.date), 1 /* TEXT */), _createElementVNode(\"p\", null, \"Score: \" + _toDisplayString(movie.score), 1 /* TEXT */), _createElementVNode(\"img\", {\n      src: movie.posterURL,\n      alt: \"Poster\",\n      style: {\n        \"max-width\": \"200px\"\n      }\n    }, null, 8 /* PROPS */, _hoisted_5)]);\n  }), 128 /* KEYED_FRAGMENT */))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_6, _cache[18] || (_cache[18] = [_createElementVNode(\"p\", null, \"No movies found\", -1 /* HOISTED */)])))]);\n}","map":{"version":3,"names":["key","class","_createElementBlock","_createElementVNode","_toDisplayString","$data","userName","type","onClick","_cache","args","$options","signoutuser","toggleForm","isFormVisible","_hoisted_1","onSubmit","_withModifiers","addMovie","for","id","$event","newMovie","title","required","genre","_createStaticVNode","date","score","onChange","handleImageUpload","accept","imagePreview","_hoisted_2","src","alt","style","_hoisted_3","_createCommentVNode","userMovies","length","_hoisted_4","_Fragment","_renderList","movie","posterURL","_hoisted_5","_hoisted_6"],"sources":["D:\\facultate\\mastrer\\movie-app-tic\\front\\client\\src\\components\\HomePage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h1>{{userName}} Movie List</h1>\r\n      <button type = button v-on:click=\"signoutuser\" class=\"btn-up\"> Sign out</button>\r\n      <button @click=\"toggleForm\" class=\"btn-up\">Add New Movie</button>\r\n\r\n      <div v-if=\"isFormVisible\" class=\"addmovieform\">\r\n      <h2>Add a New Movie</h2>\r\n       <form @submit.prevent=\"addMovie\">\r\n        <div>\r\n          <label for=\"movieTitle\">Title:</label>\r\n          <input type=\"text\" id=\"movieTitle\" v-model=\"newMovie.title\" required />\r\n        </div>\r\n\r\n        <div>\r\n          <label for=\"movieGenre\">Genre:</label>\r\n          <select id=\"movieGenre\" v-model=\"newMovie.genre\" required>\r\n            <option value=\"\" disabled selected>Select a genre</option>\r\n            <option value=\"Action\">Action</option>\r\n            <option value=\"Animation\">Animation</option>\r\n            <option value=\"Comedy\">Comedy</option>\r\n            <option value=\"Drama\">Drama</option>\r\n            <option value=\"Horror\">Horror</option>\r\n            <option value=\"Romance\">Romance</option>\r\n            <option value=\"Sci-Fi\">Sci-Fi</option>\r\n            <option value=\"Thriller\">Thriller</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div>\r\n          <label for=\"movieDate\">Date:</label>\r\n          <input type=\"date\" id=\"movieDate\" v-model=\"newMovie.date\" required />\r\n        </div>\r\n\r\n        <div>\r\n          <label for=\"movieScore\">Score:</label>\r\n          <input type=\"number\" id=\"movieScore\" v-model=\"newMovie.score\" required />\r\n        </div>\r\n\r\n        <div>\r\n          <label for=\"moviePoster\">Movie Poster:</label>\r\n          <input type=\"file\" id=\"moviePoster\" @change=\"handleImageUpload\" accept=\"image/*\" />\r\n        </div>\r\n        <div v-if=\"imagePreview\">\r\n          <h3>Image Preview:</h3>\r\n          <img :src=\"imagePreview\" alt=\"Image Preview\" style=\"max-width: 200px; margin-top: 10px;\"/>\r\n        </div>\r\n\r\n        <button type=\"submit\" class=\"btn-form\">Add Movie</button>\r\n        </form>\r\n       </div>\r\n\r\n       <div v-if=\"userMovies.length > 0\">\r\n  <h2>Your Movies:</h2>\r\n  <ul>\r\n    <li v-for=\"movie in userMovies\" :key=\"movie.title\">\r\n      <h3>{{ movie.title }}</h3>\r\n      <p>{{ movie.genre }}</p>\r\n      <p>{{ movie.date }}</p>\r\n      <p>Score: {{ movie.score }}</p>\r\n      <img :src=\"movie.posterURL\" alt=\"Poster\" style=\"max-width: 200px;\"/>\r\n    </li>\r\n  </ul>\r\n</div>\r\n<div v-else>\r\n  <p>No movies found</p>\r\n</div>\r\n\r\n    </div>\r\n\r\n\r\n  </template>\r\n\r\n<script>\r\nimport { signOut } from \"firebase/auth\";\r\nimport {auth} from '../firebaseConfig';\r\nimport { getFirestore, collection, addDoc} from \"firebase/firestore\";\r\nimport{ ref, uploadBytes, getDownloadURL} from \"firebase/storage\";\r\nimport { storage } from \"../firebaseConfig\";\r\n\r\nconst db = getFirestore();\r\n\r\nexport default {\r\n  name: 'HomePage',\r\n  data(){\r\n    return{\r\n      isFormVisible: false,\r\n      newMovie:{\r\n        title: '',\r\n        genre: '',\r\n        date: '',\r\n        score: '',\r\n        poster: null,\r\n      },\r\n      userName: '',\r\n      imagePreview: null,\r\n      userMovies: [],\r\n      loading: false,\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    this.fetchUserName();\r\n  },\r\n\r\n  methods: {\r\n  async signoutuser() {\r\n    console.log(\"Sign out button clicked\");\r\n    try {\r\n      await signOut(auth);\r\n      console.log(\"User signed out\");\r\n      this.$router.push('/');\r\n    } catch (error) {\r\n      console.error(\"Error signing out: \", error);\r\n    }\r\n  },\r\n  toggleForm(){\r\n    this.isFormVisible = !this.isFormVisible;\r\n  },\r\n  handleImageUpload(event) {\r\n      const file = event.target.files[0];\r\n      if (file) {\r\n        \r\n        this.imagePreview = URL.createObjectURL(file);\r\n        this.newMovie.poster = file; \r\n        console.log('Poster uploaded:', this.newMovie.poster);\r\n      }else {\r\n        console.error('No file selected or invalid file.');\r\n      }\r\n    },\r\n\r\n  async fetchUserName(){\r\n      try{\r\n        const token = localStorage.getItem('token');  // presupunând că ai salvat token-ul în localStorage după login\r\n        const response = await fetch('http://localhost:3000/user', {\r\n          method: 'GET',\r\n          headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n          },\r\n        });\r\n        \r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          this.userName = data.userName;  // Preia numele utilizatorului\r\n        } else {\r\n          console.error('Error fetching user:', response.statusText);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error displaying user name:', error);\r\n      }\r\n      \r\n  },\r\n\r\n  async addMovie(){\r\n    try {\r\n        if (!this.newMovie.poster || !(this.newMovie.poster instanceof File)) {\r\n          alert(\"Please upload a valid movie poster.\");\r\n          return;\r\n        }\r\n\r\n        const posterRef = ref(storage, `posters/${this.newMovie.poster.name}`);\r\n        await uploadBytes(posterRef, this.newMovie.poster);\r\n        const posterURL = await getDownloadURL(posterRef);\r\n\r\n        const user = auth.currentUser;\r\n        await addDoc(collection(db, \"movies\"), {\r\n          title: this.newMovie.title,\r\n          genre: this.newMovie.genre,\r\n          date: this.newMovie.date,\r\n          score: this.newMovie.score,\r\n          posterURL,\r\n          userEmail: user.email,\r\n        });\r\n\r\n        console.log('Movie added successfully');\r\n        this.newMovie = { title: '', genre: '', date: '', score: '', poster: null };\r\n        this.imagePreview = null;\r\n        this.isFormVisible = false;\r\n      } catch (error) {\r\n        console.error(\"Error adding movie: \", error);\r\n      }\r\n    \r\n    },\r\n    \r\n    async fetchUserMovies(){\r\n      this.loading = true;\r\n      try{\r\n        const token = localStorage.getItem('userToken');\r\n        const response = await fetch ('http://localhost:3000/movies', {\r\n          method: 'GET',\r\n          headers:{\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n        const data = await response.json();\r\n        this.userMovies = data;\r\n      } catch(error){\r\n        console.error('Error displaying movies: ', error);      \r\n      }finally {\r\n      this.loading = false;  // Setează loading la false după ce cererea a fost completată\r\n    }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.fetchUserMovies(); // Apelează această metodă atunci când componenta se încarcă\r\n  }\r\n};\r\n</script>\r\n\r\n<style src=\"../styles/HomePage.css\"></style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}