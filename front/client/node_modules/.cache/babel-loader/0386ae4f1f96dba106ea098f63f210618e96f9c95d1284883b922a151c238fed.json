{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { signOut } from \"firebase/auth\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { auth } from '../firebaseConfig';\nimport { getFirestore, collection, addDoc, serverTimestamp } from \"firebase/firestore\";\nimport { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport { storage } from \"../firebaseConfig\";\nconst db = getFirestore();\nexport default {\n  name: 'HomePage',\n  data() {\n    return {\n      movies: [],\n      isFormVisible: false,\n      isEditing: false,\n      editedMovie: {},\n      newMovie: {\n        title: '',\n        genre: '',\n        date: '',\n        score: '',\n        poster: null\n      },\n      imagePreview: null,\n      username: null,\n      selectedMovie: null\n    };\n  },\n  created() {\n    this.displayMovies();\n    onAuthStateChanged(auth, user => {\n      if (user) {\n        this.username = user.email;\n        this.fetchUserName(user.uid);\n        console.log(\"User logged in:\", user.email);\n      } else {\n        console.log(\"No user logged in\");\n        this.$router.push('/');\n      }\n    });\n  },\n  methods: {\n    async signoutuser() {\n      console.log(\"Sign out button clicked\");\n      try {\n        await signOut(auth);\n        console.log(\"User signed out\");\n        this.$router.push('/');\n      } catch (error) {\n        console.error(\"Error signing out: \", error);\n      }\n    },\n    toggleForm() {\n      this.isFormVisible = !this.isFormVisible;\n    },\n    handleImageUpload(event) {\n      const file = event.target.files[0];\n      if (file) {\n        this.imagePreview = URL.createObjectURL(file);\n        this.newMovie.poster = file;\n        console.log('Poster uploaded:', this.newMovie.poster);\n      } else {\n        console.error('No file selected or invalid file.');\n      }\n    },\n    fetchUserName() {\n      const user = auth.currentUser;\n      if (user) {\n        fetch(`http://localhost:3000/user/${user.uid}`).then(response => response.json()).then(data => {\n          console.log('User data fetched:', data);\n          this.username = data.firstName;\n        }).catch(error => {\n          console.error('Error fetching user:', error);\n        });\n      }\n    },\n    async addMovie() {\n      try {\n        if (!this.newMovie.poster || !(this.newMovie.poster instanceof File)) {\n          alert(\"Please upload a valid movie poster.\");\n          return;\n        }\n\n        //upload poster in storage\n        const posterRef = ref(storage, `posters/${this.newMovie.poster.name}`);\n        await uploadBytes(posterRef, this.newMovie.poster);\n        const posterURL = await getDownloadURL(posterRef);\n        const user = auth.currentUser;\n        await addDoc(collection(db, \"movies\"), {\n          title: this.newMovie.title,\n          genre: this.newMovie.genre,\n          date: this.newMovie.date,\n          score: parseFloat(this.newMovie.score),\n          posterURL,\n          user: {\n            uid: user.uid,\n            email: user.email\n          },\n          metadata: {\n            createdAt: serverTimestamp(),\n            updatedAt: serverTimestamp()\n          }\n        });\n        console.log('Movie added successfully');\n        this.newMovie = {\n          title: '',\n          genre: '',\n          date: '',\n          score: '',\n          poster: null\n        };\n        this.imagePreview = null;\n        this.isFormVisible = false;\n      } catch (error) {\n        console.error(\"Error adding movie: \", error);\n      }\n    },\n    async displayMovies() {\n      try {\n        const response = await fetch('http://localhost:3000/movies');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const movies = await response.json();\n        this.movies = movies.map(movie => ({\n          ...movie,\n          posterURL: movie.posterURL\n        }));\n      } catch (error) {\n        console.error(\"Error displaying movies: \", error);\n      }\n    },\n    showMovieDetails(movie) {\n      this.selectedMovie = movie;\n    },\n    closeModal() {\n      this.selectedMovie = null;\n    },\n    formatDate(date) {\n      if (!date) return 'No date available';\n      try {\n        const options = {\n          day: '2-digit',\n          month: '2-digit',\n          year: 'numeric'\n        };\n        //'en-GB' este pentru zi/luna/an\n        return new Date(date).toLocaleDateString('en-GB', options);\n      } catch (error) {\n        return 'Invalid Date';\n      }\n    },\n    editMovie() {\n      this.isEditing = true;\n      this.editedMovie = {\n        ...this.selectedMovie\n      };\n    },\n    async saveMovieEdits() {\n      try {\n        if (!this.selectedMovie.id) return;\n        const movieRef = doc(db, \"movies\", this.selectedMovie.id);\n        await updateDoc(movieRef, {\n          title: this.editedMovie.title,\n          genre: this.editedMovie.genre,\n          date: this.editedMovie.date,\n          score: this.editedMovie.score,\n          \"metadata.updatedAt\": serverTimestamp()\n        });\n\n        // Actualizăm și în interfață\n        Object.assign(this.selectedMovie, this.editedMovie);\n        this.isEditing = false;\n      } catch (error) {\n        console.error(\"Error updating movie:\", error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["signOut","onAuthStateChanged","auth","getFirestore","collection","addDoc","serverTimestamp","ref","uploadBytes","getDownloadURL","storage","db","name","data","movies","isFormVisible","isEditing","editedMovie","newMovie","title","genre","date","score","poster","imagePreview","username","selectedMovie","created","displayMovies","user","email","fetchUserName","uid","console","log","$router","push","methods","signoutuser","error","toggleForm","handleImageUpload","event","file","target","files","URL","createObjectURL","currentUser","fetch","then","response","json","firstName","catch","addMovie","File","alert","posterRef","posterURL","parseFloat","metadata","createdAt","updatedAt","ok","Error","map","movie","showMovieDetails","closeModal","formatDate","options","day","month","year","Date","toLocaleDateString","editMovie","saveMovieEdits","id","movieRef","doc","updateDoc","Object","assign"],"sources":["D:\\facultate\\mastrer\\movie-app-tic\\front\\client\\src\\components\\HomePage.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <div class=\"container\">\r\n      <h1>{{ username ? `${username}'s Movie List` : \"Your Movie List\" }}</h1>\r\n      <button type = button v-on:click=\"signoutuser\" class=\"btn-up\"> Sign out</button>\r\n      <button @click=\"toggleForm\" class=\"btn-up\">Add New Movie</button>\r\n\r\n      <div v-if=\"isFormVisible\" class=\"addmovieform\">\r\n      <h2>Add a New Movie</h2>\r\n       <form @submit.prevent=\"addMovie\">\r\n        <div>\r\n          <label for=\"movieTitle\">Title:</label>\r\n          <input type=\"text\" id=\"movieTitle\" v-model=\"newMovie.title\" required />\r\n        </div>\r\n\r\n        <div>\r\n          <label for=\"movieGenre\">Genre:</label>\r\n          <select id=\"movieGenre\" v-model=\"newMovie.genre\" required>\r\n            <option value=\"\" disabled selected>Select a genre</option>\r\n            <option value=\"Action\">Action</option>\r\n            <option value=\"Animation\">Animation</option>\r\n            <option value=\"Comedy\">Comedy</option>\r\n            <option value=\"Drama\">Drama</option>\r\n            <option value=\"Horror\">Horror</option>\r\n            <option value=\"Romance\">Romance</option>\r\n            <option value=\"Sci-Fi\">Sci-Fi</option>\r\n            <option value=\"Thriller\">Thriller</option>\r\n          </select>\r\n        </div>\r\n\r\n        <div>\r\n          <label for=\"movieDate\">Date:</label>\r\n          <input type=\"date\" id=\"movieDate\" v-model=\"newMovie.date\" required />\r\n        </div>\r\n\r\n        <div>\r\n          <label for=\"movieScore\">Score:</label>\r\n          <input type=\"number\" id=\"movieScore\" v-model=\"newMovie.score\" required />\r\n        </div>\r\n\r\n        <div>\r\n          <label for=\"moviePoster\">Movie Poster:</label>\r\n          <input type=\"file\" id=\"moviePoster\" @change=\"handleImageUpload\" accept=\"image/*\" />\r\n        </div>\r\n        <div v-if=\"imagePreview\">\r\n          <h3>Image Preview:</h3>\r\n          <img :src=\"imagePreview\" alt=\"Image Preview\" style=\"max-width: 200px; margin-top: 10px;\"/>\r\n        </div>\r\n\r\n        <button type=\"submit\" class=\"btn-form\">Add Movie</button>\r\n        </form>\r\n       </div>\r\n    \r\n    </div>\r\n\r\n    <div v-if=\"movies.length >0\">\r\n     \r\n      <div class=\"movie-list\">\r\n        <div v-for=\"movie in movies\" :key=\"movie.id\" class=\"movie-item\" @click=\"showMovieDetails(movie)\">\r\n          \r\n          <img \r\n          :src=\"movie.posterURL\" \r\n          :alt=\"movie.title\"\r\n          class=\"movie-poster\"\r\n        />\r\n        <div class=\"movie-details\">\r\n          <strong>{{ movie.title }}</strong><br/>\r\n          \r\n        </div>\r\n        </div>\r\n\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"selectedMovie\" class=\"modal-overlay\" @click=\"closeModal\">\r\n      <div class=\"modal-content\" @click.stop>\r\n        <button class=\"close-button\" @click=\"closeModal\">&times;</button>\r\n        <div class=\"modal-body\">\r\n          <img :src=\"selectedMovie.posterURL\" :alt=\"selectedMovie.title\" class=\"modal-poster\"/>\r\n          <div class=\"modal-info\">\r\n\r\n            <h2 v-if=\"!isEditing\">{{ selectedMovie.title }}</h2>\r\n            <input v-else type=\"text\" v-model=\"editedMovie.title\" />\r\n\r\n           <p v-if=\"!isEditing\"><strong>Genre:</strong> {{ selectedMovie.genre }}</p>\r\n            <select v-else v-model=\"editedMovie.genre\">\r\n              <option value=\"Action\">Action</option>\r\n              <option value=\"Comedy\">Comedy</option>\r\n              <option value=\"Drama\">Drama</option>\r\n            </select>\r\n\r\n             <p v-if=\"!isEditing\"><strong>Date seen:</strong> {{ formatDate(selectedMovie.date) }}</p>\r\n            <input v-else type=\"date\" v-model=\"editedMovie.date\" />\r\n\r\n            <p v-if=\"!isEditing\"><strong>Score:</strong> {{ selectedMovie.score }}/10</p>\r\n            <input v-else type=\"number\" v-model=\"editedMovie.score\" />\r\n\r\n            <button class=\"edit-button\" @click=\"editMovie\">Edit</button>\r\n            <button class=\"delete-button\" @click=\"deleteMovie\">Delete</button>\r\n            <button v-if=\"isEditing\" @click=\"saveMovieEdits\">Save</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n\r\n    \r\n  </template>\r\n\r\n<script>\r\nimport { signOut } from \"firebase/auth\";\r\nimport { onAuthStateChanged } from \"firebase/auth\";\r\nimport {auth} from '../firebaseConfig';\r\nimport { getFirestore, collection, addDoc, serverTimestamp} from \"firebase/firestore\";\r\nimport{ ref, uploadBytes, getDownloadURL} from \"firebase/storage\";\r\nimport { storage } from \"../firebaseConfig\";\r\n\r\nconst db = getFirestore();\r\n\r\nexport default {\r\n  name: 'HomePage',\r\n  data(){\r\n    return{\r\n      movies: [],\r\n      isFormVisible: false,\r\n      isEditing: false,\r\n      editedMovie: {},\r\n      newMovie:{\r\n        title: '',\r\n        genre: '',\r\n        date: '',\r\n        score: '',\r\n        poster: null,\r\n      },\r\n      imagePreview: null,\r\n      username: null,\r\n      selectedMovie: null,\r\n    };\r\n  },\r\n\r\n  created(){\r\n    this.displayMovies();\r\n    onAuthStateChanged(auth, (user) => {\r\n      if (user) {\r\n        this.username = user.email; \r\n        this.fetchUserName(user.uid);\r\n        console.log(\"User logged in:\", user.email);\r\n      } else {\r\n        console.log(\"No user logged in\");\r\n        this.$router.push('/'); \r\n      }\r\n    });\r\n\r\n  },\r\n\r\n  methods: {\r\n  async signoutuser() {\r\n    console.log(\"Sign out button clicked\");\r\n    try {\r\n      await signOut(auth);\r\n      console.log(\"User signed out\");\r\n      this.$router.push('/');\r\n    } catch (error) {\r\n      console.error(\"Error signing out: \", error);\r\n    }\r\n  },\r\n  toggleForm(){\r\n    this.isFormVisible = !this.isFormVisible;\r\n  },\r\n  handleImageUpload(event) {\r\n      const file = event.target.files[0];\r\n      if (file) {\r\n        \r\n        this.imagePreview = URL.createObjectURL(file);\r\n        this.newMovie.poster = file; \r\n        console.log('Poster uploaded:', this.newMovie.poster);\r\n      }else {\r\n        console.error('No file selected or invalid file.');\r\n      }\r\n    },\r\n\r\n    fetchUserName() {\r\n      const user = auth.currentUser;\r\n\r\n     if (user) {\r\n         fetch(`http://localhost:3000/user/${user.uid}`).then(response => response.json())\r\n            .then(data => {\r\n               console.log('User data fetched:', data);\r\n               this.username = data.firstName;\r\n             }).catch(error => {\r\n                console.error('Error fetching user:', error);\r\n                });\r\n  }\r\n    },\r\n\r\n  async addMovie(){\r\n    try {\r\n        if (!this.newMovie.poster || !(this.newMovie.poster instanceof File)) {\r\n          alert(\"Please upload a valid movie poster.\");\r\n          return;\r\n        }\r\n\r\n         //upload poster in storage\r\n        const posterRef = ref(storage, `posters/${this.newMovie.poster.name}`);\r\n        await uploadBytes(posterRef, this.newMovie.poster);\r\n        const posterURL = await getDownloadURL(posterRef);\r\n\r\n        const user = auth.currentUser;\r\n\r\n        await addDoc(collection(db, \"movies\"), {\r\n          title: this.newMovie.title,\r\n          genre: this.newMovie.genre ,\r\n          date: this.newMovie.date,\r\n          score: parseFloat(this.newMovie.score),\r\n          posterURL,\r\n          user: {\r\n            uid: user.uid,\r\n            email: user.email,\r\n            \r\n          },\r\n          metadata: {\r\n            createdAt: serverTimestamp(),\r\n            updatedAt: serverTimestamp(),\r\n          },\r\n        });\r\n\r\n        console.log('Movie added successfully');\r\n        this.newMovie = { title: '', genre: '', date: '', score: '', poster: null };\r\n        this.imagePreview = null;\r\n        this.isFormVisible = false;\r\n      } catch (error) {\r\n        console.error(\"Error adding movie: \", error);\r\n      }\r\n    \r\n    },\r\n    async displayMovies(){\r\n      try{\r\n        const response = await fetch('http://localhost:3000/movies');\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n       const movies = await response.json();\r\n       this.movies = movies.map(movie => ({\r\n      ...movie,\r\n      posterURL: movie.posterURL \r\n    }));\r\n      } catch(error){\r\n        console.error(\"Error displaying movies: \", error);\r\n      }\r\n    },\r\n\r\n    showMovieDetails(movie){\r\n      this.selectedMovie = movie;\r\n    },\r\n    closeModal(){\r\n      this.selectedMovie = null;\r\n    },\r\n    formatDate(date){\r\n      if (!date) return 'No date available';\r\n      try {\r\n        const options = { day: '2-digit', month: '2-digit', year: 'numeric' };\r\n        //'en-GB' este pentru zi/luna/an\r\n        return new Date(date).toLocaleDateString('en-GB', options); \r\n    } catch (error) {\r\n      return 'Invalid Date';\r\n    }\r\n    },\r\n\r\n    editMovie(){\r\n      this.isEditing = true;\r\n      this.editedMovie = { ...this.selectedMovie };\r\n    },\r\n\r\n    async saveMovieEdits() {\r\n  try {\r\n    if (!this.selectedMovie.id) return;\r\n\r\n    const movieRef = doc(db, \"movies\", this.selectedMovie.id);\r\n    await updateDoc(movieRef, {\r\n      title: this.editedMovie.title,\r\n      genre: this.editedMovie.genre,\r\n      date: this.editedMovie.date,\r\n      score: this.editedMovie.score,\r\n      \"metadata.updatedAt\": serverTimestamp(),\r\n    });\r\n\r\n    // Actualizăm și în interfață\r\n    Object.assign(this.selectedMovie, this.editedMovie);\r\n    this.isEditing = false;\r\n  } catch (error) {\r\n    console.error(\"Error updating movie:\", error);\r\n  }\r\n},\r\n  }\r\n};\r\n</script>\r\n\r\n<style src=\"../styles/HomePage.css\"></style>"],"mappings":";;;;;AA+GA,SAASA,OAAM,QAAS,eAAe;AACvC,SAASC,kBAAiB,QAAS,eAAe;AAClD,SAAQC,IAAI,QAAO,mBAAmB;AACtC,SAASC,YAAY,EAAEC,UAAU,EAAEC,MAAM,EAAEC,eAAe,QAAO,oBAAoB;AACrF,SAAQC,GAAG,EAAEC,WAAW,EAAEC,cAAc,QAAO,kBAAkB;AACjE,SAASC,OAAM,QAAS,mBAAmB;AAE3C,MAAMC,EAAC,GAAIR,YAAY,CAAC,CAAC;AAEzB,eAAe;EACbS,IAAI,EAAE,UAAU;EAChBC,IAAIA,CAAA,EAAE;IACJ,OAAM;MACJC,MAAM,EAAE,EAAE;MACVC,aAAa,EAAE,KAAK;MACpBC,SAAS,EAAE,KAAK;MAChBC,WAAW,EAAE,CAAC,CAAC;MACfC,QAAQ,EAAC;QACPC,KAAK,EAAE,EAAE;QACTC,KAAK,EAAE,EAAE;QACTC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE;MACV,CAAC;MACDC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,aAAa,EAAE;IACjB,CAAC;EACH,CAAC;EAEDC,OAAOA,CAAA,EAAE;IACP,IAAI,CAACC,aAAa,CAAC,CAAC;IACpB3B,kBAAkB,CAACC,IAAI,EAAG2B,IAAI,IAAK;MACjC,IAAIA,IAAI,EAAE;QACR,IAAI,CAACJ,QAAO,GAAII,IAAI,CAACC,KAAK;QAC1B,IAAI,CAACC,aAAa,CAACF,IAAI,CAACG,GAAG,CAAC;QAC5BC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEL,IAAI,CAACC,KAAK,CAAC;MAC5C,OAAO;QACLG,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;QAChC,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;MACxB;IACF,CAAC,CAAC;EAEJ,CAAC;EAEDC,OAAO,EAAE;IACT,MAAMC,WAAWA,CAAA,EAAG;MAClBL,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtC,IAAI;QACF,MAAMlC,OAAO,CAACE,IAAI,CAAC;QACnB+B,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;QAC9B,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;MACxB,EAAE,OAAOG,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC7C;IACF,CAAC;IACDC,UAAUA,CAAA,EAAE;MACV,IAAI,CAACzB,aAAY,GAAI,CAAC,IAAI,CAACA,aAAa;IAC1C,CAAC;IACD0B,iBAAiBA,CAACC,KAAK,EAAE;MACrB,MAAMC,IAAG,GAAID,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;MAClC,IAAIF,IAAI,EAAE;QAER,IAAI,CAACnB,YAAW,GAAIsB,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;QAC7C,IAAI,CAACzB,QAAQ,CAACK,MAAK,GAAIoB,IAAI;QAC3BV,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAAChB,QAAQ,CAACK,MAAM,CAAC;MACvD,CAAC,MAAK;QACJU,OAAO,CAACM,KAAK,CAAC,mCAAmC,CAAC;MACpD;IACF,CAAC;IAEDR,aAAaA,CAAA,EAAG;MACd,MAAMF,IAAG,GAAI3B,IAAI,CAAC8C,WAAW;MAE9B,IAAInB,IAAI,EAAE;QACNoB,KAAK,CAAC,8BAA8BpB,IAAI,CAACG,GAAG,EAAE,CAAC,CAACkB,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAC5EF,IAAI,CAACrC,IAAG,IAAK;UACXoB,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAErB,IAAI,CAAC;UACvC,IAAI,CAACY,QAAO,GAAIZ,IAAI,CAACwC,SAAS;QAChC,CAAC,CAAC,CAACC,KAAK,CAACf,KAAI,IAAK;UACfN,OAAO,CAACM,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C,CAAC,CAAC;MAChB;IACE,CAAC;IAEH,MAAMgB,QAAQA,CAAA,EAAE;MACd,IAAI;QACA,IAAI,CAAC,IAAI,CAACrC,QAAQ,CAACK,MAAK,IAAK,EAAE,IAAI,CAACL,QAAQ,CAACK,MAAK,YAAaiC,IAAI,CAAC,EAAE;UACpEC,KAAK,CAAC,qCAAqC,CAAC;UAC5C;QACF;;QAEC;QACD,MAAMC,SAAQ,GAAInD,GAAG,CAACG,OAAO,EAAE,WAAW,IAAI,CAACQ,QAAQ,CAACK,MAAM,CAACX,IAAI,EAAE,CAAC;QACtE,MAAMJ,WAAW,CAACkD,SAAS,EAAE,IAAI,CAACxC,QAAQ,CAACK,MAAM,CAAC;QAClD,MAAMoC,SAAQ,GAAI,MAAMlD,cAAc,CAACiD,SAAS,CAAC;QAEjD,MAAM7B,IAAG,GAAI3B,IAAI,CAAC8C,WAAW;QAE7B,MAAM3C,MAAM,CAACD,UAAU,CAACO,EAAE,EAAE,QAAQ,CAAC,EAAE;UACrCQ,KAAK,EAAE,IAAI,CAACD,QAAQ,CAACC,KAAK;UAC1BC,KAAK,EAAE,IAAI,CAACF,QAAQ,CAACE,KAAI;UACzBC,IAAI,EAAE,IAAI,CAACH,QAAQ,CAACG,IAAI;UACxBC,KAAK,EAAEsC,UAAU,CAAC,IAAI,CAAC1C,QAAQ,CAACI,KAAK,CAAC;UACtCqC,SAAS;UACT9B,IAAI,EAAE;YACJG,GAAG,EAAEH,IAAI,CAACG,GAAG;YACbF,KAAK,EAAED,IAAI,CAACC;UAEd,CAAC;UACD+B,QAAQ,EAAE;YACRC,SAAS,EAAExD,eAAe,CAAC,CAAC;YAC5ByD,SAAS,EAAEzD,eAAe,CAAC;UAC7B;QACF,CAAC,CAAC;QAEF2B,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;QACvC,IAAI,CAAChB,QAAO,GAAI;UAAEC,KAAK,EAAE,EAAE;UAAEC,KAAK,EAAE,EAAE;UAAEC,IAAI,EAAE,EAAE;UAAEC,KAAK,EAAE,EAAE;UAAEC,MAAM,EAAE;QAAK,CAAC;QAC3E,IAAI,CAACC,YAAW,GAAI,IAAI;QACxB,IAAI,CAACT,aAAY,GAAI,KAAK;MAC5B,EAAE,OAAOwB,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IAEF,CAAC;IACD,MAAMX,aAAaA,CAAA,EAAE;MACnB,IAAG;QACD,MAAMuB,QAAO,GAAI,MAAMF,KAAK,CAAC,8BAA8B,CAAC;QAC5D,IAAI,CAACE,QAAQ,CAACa,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACD,MAAMnD,MAAK,GAAI,MAAMqC,QAAQ,CAACC,IAAI,CAAC,CAAC;QACpC,IAAI,CAACtC,MAAK,GAAIA,MAAM,CAACoD,GAAG,CAACC,KAAI,KAAM;UACpC,GAAGA,KAAK;UACRR,SAAS,EAAEQ,KAAK,CAACR;QACnB,CAAC,CAAC,CAAC;MACD,EAAE,OAAMpB,KAAK,EAAC;QACZN,OAAO,CAACM,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC;IAED6B,gBAAgBA,CAACD,KAAK,EAAC;MACrB,IAAI,CAACzC,aAAY,GAAIyC,KAAK;IAC5B,CAAC;IACDE,UAAUA,CAAA,EAAE;MACV,IAAI,CAAC3C,aAAY,GAAI,IAAI;IAC3B,CAAC;IACD4C,UAAUA,CAACjD,IAAI,EAAC;MACd,IAAI,CAACA,IAAI,EAAE,OAAO,mBAAmB;MACrC,IAAI;QACF,MAAMkD,OAAM,GAAI;UAAEC,GAAG,EAAE,SAAS;UAAEC,KAAK,EAAE,SAAS;UAAEC,IAAI,EAAE;QAAU,CAAC;QACrE;QACA,OAAO,IAAIC,IAAI,CAACtD,IAAI,CAAC,CAACuD,kBAAkB,CAAC,OAAO,EAAEL,OAAO,CAAC;MAC9D,EAAE,OAAOhC,KAAK,EAAE;QACd,OAAO,cAAc;MACvB;IACA,CAAC;IAEDsC,SAASA,CAAA,EAAE;MACT,IAAI,CAAC7D,SAAQ,GAAI,IAAI;MACrB,IAAI,CAACC,WAAU,GAAI;QAAE,GAAG,IAAI,CAACS;MAAc,CAAC;IAC9C,CAAC;IAED,MAAMoD,cAAcA,CAAA,EAAG;MACzB,IAAI;QACF,IAAI,CAAC,IAAI,CAACpD,aAAa,CAACqD,EAAE,EAAE;QAE5B,MAAMC,QAAO,GAAIC,GAAG,CAACtE,EAAE,EAAE,QAAQ,EAAE,IAAI,CAACe,aAAa,CAACqD,EAAE,CAAC;QACzD,MAAMG,SAAS,CAACF,QAAQ,EAAE;UACxB7D,KAAK,EAAE,IAAI,CAACF,WAAW,CAACE,KAAK;UAC7BC,KAAK,EAAE,IAAI,CAACH,WAAW,CAACG,KAAK;UAC7BC,IAAI,EAAE,IAAI,CAACJ,WAAW,CAACI,IAAI;UAC3BC,KAAK,EAAE,IAAI,CAACL,WAAW,CAACK,KAAK;UAC7B,oBAAoB,EAAEhB,eAAe,CAAC;QACxC,CAAC,CAAC;;QAEF;QACA6E,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC1D,aAAa,EAAE,IAAI,CAACT,WAAW,CAAC;QACnD,IAAI,CAACD,SAAQ,GAAI,KAAK;MACxB,EAAE,OAAOuB,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC/C;IACF;EACE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}